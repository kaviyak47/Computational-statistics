import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
np.random.seed(0)
data = np.random.rand(200, 2)
plt.figure(figsize=(8, 6))
plt.scatter(data[:, 0], data[:, 1], c='blue')
plt.title("Original Data Plot")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)
plt.figure(figsize=(8, 6))
plt.scatter(data_scaled[:, 0], data_scaled[:, 1], c='blue')
plt.title("Standardized Data Plot")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()
inertia = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i)
    kmeans.fit(data_scaled)
    inertia.append(kmeans.inertia_)
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), inertia, marker='o')
plt.title("Elbow Graph")
plt.xlabel("Number of Clusters")
plt.ylabel("Inertia")
plt.show()
elbow_point = np.diff(inertia, 2).argmin() + 2
print("Recommended number of clusters:", elbow_point)
kmeans = KMeans(n_clusters=elbow_point)
kmeans.fit(data_scaled)
labels = kmeans.labels_
centers = kmeans.cluster_centers_
plt.figure(figsize=(8, 6))
plt.scatter(data_scaled[:, 0], data_scaled[:, 1], c=labels, cmap='viridis')
plt.scatter(centers[:, 0], centers[:, 1], c='red', marker='*', s=200)
plt.title("Clustering with {} Clusters".format(elbow_point))
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()
